<date>Tue Mar 11 22:33:32 2008</date>
Looks like I'll have to license this under GPL, due to libbfd.

<date>Mon Mar  6 13:29:06 2006</date>

How to get a list of all instructions used in an objdump disassembly:
> mipsel-linux-objdump -d simple | pcregrep '^\s+(\d|[a-f])+:' | awk '{print $3}' | sort | uniq

and a list of all the binary instructions:
mipsel-linux-objdump -d simple | pcregrep '^\s+(\d|[a-f])+:' | awk '{print $2}'


register usage: both rt and rd are used as result registers in instruction
formats, depending on whether rt is used for an operand too.


<date>Thu Mar  9 15:01:51 2006</date>

We're ignoring overflow exceptions for now, just doing signed and unsigned
arithmetic instructions identically.


<date>Fri Mar 17 17:50:27 2006</date>

How does mmap happen?

The static function do_mmap in alloc.c calls the mmap assembly stub which just
enters the syscall number into v0 and executes 'syscall'. The MIPS setup is
clean enough that the stack and parameter setup created for the mmap() call from
do_mmap can be used direclty by the syscall.

<date>Wed May 31 17:19:00 2006</date>

syscall procedure:
- after the actual call, control goes to the __unified_syscall label in
  mips/unified.S
- there, check for non-zero in $a3, if not, return (to syscall caller
  presumably), without touching $v0.
- if $a3 non-zero:
  - store $v0 into the errno location,
  - write -1 into $v0
  - return to caller.

Thus, a syscall implementation has to set $a3 to non-zero and $v0 to the errno
to indicate an error; and to set $v0 to its normal return value on success.
Seems also sensible to set $a3 to zero to make sure no error is flagged if $a3
happened to be non-zero from before (eg. a 4th syscall argument).


<date>Thu Jun  1 14:23:56 2006</date>

How to get a nice trace of memory access addresses from the runmips log file, so
we can see how close heap and stack got, and how much there is to spare:

grep mips-mem: runmips.2  | sed -ne 's/^.* phys addr \(0x[0-9a-f]*\) .*$/\1/p' | xargs printf "%d\n" | sort -n | uniq > addresses.dat
