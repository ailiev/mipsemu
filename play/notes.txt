<date>Fri Mar  3 12:41:03 2006</date>

Trying to figure out whether the dietlibc implementation of malloc is good
(simpple?) enough for us.
It calls syscalls:
- mmap (with MAP_ANONYMOUS, and no file-related stuff)

so, I need to implement an mmap syscall which finds and returns a (largish)
pointer to heap memory.


mystery: where does the call to __small_malloc from _alloc_libc_malloc (in
alloc.c) end up in the binary? In the objdump disassembly, __small_malloc is not
listed for some reason, but it is right after error_unified_syscall (perhaps
this is because it's a file-local/static function)


<date>Fri Mar  3 14:03:54 2006</date>

Initialization of $sp in __start:
- it appears to start out with some value, it's not fully initialized in
  __start.
- mask out some bits with mask -8, which is bit pattern 0xFFFFFFF8, ie. bits 0-2
are masked out.
- subtract 24 from it
- ie: $sp should be initialized before the program runs.


<date>Tue Mar  7 14:43:20 2006</date>

Just noticed that the mipsel-linux disassembler (via objdump) shows an addu with
one operand $zero as a move! move is a pseudoinstruction! Confucious!!


<date>Wed Mar  8 11:44:29 2006</date>

Memory access instructions have the address as the *rs* register + the immediate
offset.


<date>Wed Mar  8 12:09:13 2006</date>

The order of operands is significant for many instructions, like shifts, and has
no obvious first priciples behind it. Thus, need to pay attention when writing
the evaluation code, and document how my .in1 and .in2 fields are used for each
case.
